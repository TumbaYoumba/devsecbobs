init:
  extends: 
    - .allow_failure
    - .tags
  stage: init
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/toolset:latest"
  # image: docker
  before_script:
    - |
     if [ $SEC_CODE_CLONE == "true" ]
     then 
      git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
      # If you are clonning from insecure SCM
      # git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      echo $SSH_PUBLIC > ~/.ssh/id_rsa.pub
      eval $(ssh-agent -s)
      echo "$SSH_PRIVATE" | ssh-add -
      export SSH_PRIVATE=""
      ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
      git clone $REPO_URL code && mv code/* . && rm -rf code
      export SEC_ISSUES_BRANCH=$(git branch --show-current)
     fi
    - env
    - ls -la
    - echo "CI_PROJECT_DIR content" && ls $CI_PROJECT_DIR

  script:
    - |
      set -xe
      env | grep "SEC_"

      if [ "$SEC_ISSUES_BRANCH" == "" ]; then
        export SEC_ISSUES_BRANCH="$CI_COMMIT_BRANCH"
      fi

      if [ "$SEC_DEFECT_MANAGEMENT_SYSTEM" == "" ]; then
        export SEC_DEFECT_MANAGEMENT_SYSTEM="portal"
      fi

      echo "SEC_ISSUES_BRANCH=$SEC_ISSUES_BRANCH" >> variables.env
      echo "SEC_DEFECT_MANAGEMENT_SYSTEM=$SEC_DEFECT_MANAGEMENT_SYSTEM" >> variables.env
      
      if [ "$SEC_DEFECT_MANAGEMENT_SYSTEM" == "portal" ]; then

        # SET PRODUCT VARIABLE
        if [ "$SEC_PORTAL_PRODUCT_NAME" == "" ]; then
          # REMOVE COMMENT IF YOU NEED TO CREATE PRODUCTS PER REPOSITORY
          # export product_name=$CI_PROJECT_NAME" 
        fi
        
        CI_REPOSITORY_URL_SSH=$(echo "$CI_REPOSITORY_URL" | sed -E 's|https://[^/]+@|git@|' | sed -E 's|/|:|' | sed 's|https://||')


        AUDIT_ID=$(curl -s --insecure -XPOST "$SEC_PORTAL_URL/api/v1/audit/" \
            -H "Content-Type: application/json" \
            -H "Authorization: Token $SEC_PORTAL_KEY"  \
            -d "" | jq '.id')

        echo "AUDIT_ID=$AUDIT_ID" >> variables.env
        echo "CI_REPOSITORY_URL_SSH=$CI_REPOSITORY_URL_SSH" >> variables.env
        echo "SEC_PORTAL_PRODUCT_NAME=$SEC_PORTAL_PRODUCT_NAME" >> variables.env
      fi

      # if [ "$SEC_DEFECT_MANAGEMENT_SYSTEM" == "defectdojo" ]; then

      #   if [ "$DOJO_PROJECT_TYPE" == "" ]; then
      #     export DOJO_PROJECT_TYPE="$CI_PROJECT_ROOT_NAMESPACE"
      #   fi

      #   if [ "$DOJO_PROJECT_NAME" == "" ]; then
      #     export DOJO_PROJECT_NAME="$CI_PROJECT_ROOT_NAMESPACE-$CI_PROJECT_NAME"
      #   fi

      #   if [ "$DOJO_PROJECT_DESCRIPTION" == "" ]; then
      #     export DOJO_PROJECT_DESCRIPTION=${CI_PROJECT_URL}
      #   fi    

      #   if [ "$DOJO_REPO_URL" == "" ]; then
      #     export DOJO_REPO_URL="${CI_PROJECT_URL}/-/tree/${CI_COMMIT_BRANCH}"
      #   fi

      #   ###### Create/ Get Product type

      #   echo "---------- create Product type ${DOJO_PROJECT_TYPE} ------------"

      #   product_type_post_data()
      #   {
      #   cat <<EOF
      #   {
      #       "name": "$DOJO_PROJECT_TYPE"
      #   }
      #   EOF
      #   }

      #   curl -s --insecure -XPOST "$SEC_DD_URL/api/v2/product_types/" \
      #       -H "Content-Type: application/json" \
      #       -H "Authorization: Token $SEC_DD_KEY"  \
      #       -d "$(product_type_post_data)"

      #   DD_PRODUCT_TYPE_ID=$(curl -s --insecure -XGET "$SEC_DD_URL/api/v2/product_types/?name=$DOJO_PROJECT_TYPE" \
      #       -H "Content-Type: application/json" \
      #       -H "Authorization: Token $SEC_DD_KEY"  \
      #       -d "$(product_type_post_data)" | jq --arg PROJECT_TYPE_NAME $DOJO_PROJECT_TYPE '.results[] | select(.name == $PROJECT_TYPE_NAME) | .id')

      #   ######

      #   ###### Create / Get Product 

      #   echo "---------- create Product ${DOJO_PROJECT_NAME} ------------"
      #   product_post_data()
      #   {
      #   cat <<EOF
      #   {
      #       "name": "$DOJO_PROJECT_NAME",
      #       "description": "$DOJO_PROJECT_DESCRIPTION",
      #       "prod_type": $DD_PRODUCT_TYPE_ID
      #   }
      #   EOF
      #   }
      #   curl -s --insecure -XPOST "$SEC_DD_URL/api/v2/products/" \
      #       -H "Content-Type: application/json" \
      #       -H "Authorization: Token $SEC_DD_KEY"  \
      #       -d "$(product_post_data)" | jq
                
      #   echo "##### get product id"
      #   DD_PRODUCT_ID=$(curl -s -XGET --insecure "$SEC_DD_URL/api/v2/products/?name=$DOJO_PROJECT_NAME" \
      #       -H  "Authorization: Token $SEC_DD_KEY" \
      #       | jq --arg PROJECT_NAME $DOJO_PROJECT_NAME '.results[] | select(.name == $PROJECT_NAME) | .id')
      #   echo "##### DD_PRODUCT_ID: $DD_PRODUCT_ID"


      #   echo "##### create Engagement"
      #   engagement_post_data()
      #   {
      #   cat <<EOF
      #   {
      #       "target_start": "$(date +%F)",
      #       "target_end": "$(date +%F)",
      #       "product": $DD_PRODUCT_ID,
      #       "name": "${CI_PIPELINE_ID}",
      #       "build_id": "${CI_PIPELINE_ID}",
      #       "commit_hash": "${CI_COMMIT_SHORT_SHA}",
      #       "description": "Latest commit by ${CI_COMMIT_AUTHOR}",
      #       "source_code_management_uri": "${DOJO_REPO_URL}",
      #       "engagement_type": "CI/CD"
      #   }
      #   EOF
      #   }
      #   DD_ENGAGEMENT_ID=$(curl -s --insecure -XPOST "$SEC_DD_URL/api/v2/engagements/" \
      #       -H "Content-Type: application/json" \
      #       -H "Authorization: Token $SEC_DD_KEY"  \
      #       -d "$(engagement_post_data)" | jq '.id')

      #   echo "##### saving variables"
      #   echo "DD_PRODUCT_ID=$DD_PRODUCT_ID" >> variables.env
      #   echo "DD_ENGAGEMENT_ID=$DD_ENGAGEMENT_ID" >> variables.env
      #   echo "DOJO_PROJECT_NAME=$DOJO_PROJECT_NAME" >> variables.env
      #   cat variables.env

      #   else
      #   echo "We don't need this outdated stuff for Whitespots portal. Only to get the branch"
      # fi
      cat variables.env
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - variables.env
      - ./
    when: always
